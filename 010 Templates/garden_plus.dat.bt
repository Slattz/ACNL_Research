//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: ACNL_Save.bt
//   Authors: Slattz
//   Version: 0.3
//   Purpose: ACNL garden_plus.dat Savefile Structure
//  Category: 
// File Mask: garden_plus.dat
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef ubyte bool;
typedef ubyte u8;
typedef uint16 u16;
typedef uint32 u32;
typedef uint64 u64;
typedef byte s8;
typedef int16 s16;
typedef int32 s32;
typedef int64 s64;

typedef struct Item 
{
    u16 ID <format=hex>;
    u16 Flags <format=hex>;
};


/* FUNCTIONS FOR STRINGS */

string     DecryptACNLValue(u64 encval) //Decrypt ACNL Numerical Values
{
    string result;

    // Unpack 64-bit value into (uint32, uint16, ubyte, ubyte) values.
    u32 enc = (encval & 0xFFFFFFFF);
    u16 adjust = ((encval >> 32) & 0xFFFF);
    u8  shift_val = ((encval >> 48) & 0xFF);
    u8  chk = ((encval >> 56) & 0xFF);
    // Validate 8-bit checksum
    if ((((enc >> 0) + (enc >> 8) + (enc >> 16) + (enc >> 24) + 0xBA) & 0xFF) != chk) return 0;
        
    u8  left_shift = ((0x1C - shift_val) & 0xFF);
    u8  right_shift = 0x20 - left_shift;

    // Handle error case: Invalid shift value.
    if (left_shift >= 0x20)
    {
        SPrintf(result, "Decrypted Value: %d", (0 + (enc << right_shift) - (adjust + 0x8F187432)));
        return result;
    }

    // This case should occur for all game-generated values.
    SPrintf(result, "Decrypted Value: %d", ((enc << left_shift) + (enc >> right_shift) - (adjust + 0x8F187432)));
    return result;
}

u64     EncryptACNLValue(u32 decval) //Encrypt ACNL Numerical Values
{
    // Make a new RNG
    u16 adjust = Random(0x10000);
    u8  shift_val = Random(0x1A);

    // Encipher value
    u32 enc = decval + adjust + 0x8F187432;
    enc = (enc >> (0x1C - shift_val)) + (enc << (shift_val + 4));

    // Calculate Checksum
    u8  chk = (((enc >> 0) + (enc >> 8) + (enc >> 16) + (enc >> 24) + 0xBA) & 0xFF);

    // Pack result
    return ((u64)enc << 0) | ((u64)adjust << 32) | ((u64)shift_val << 48) | ((u64)chk << 56);
}

string ParsePlaytime(s64 PlayTime)
{
    string init = "Current Playtime: ";
    string str;

    int days = PlayTime / (24*60*60);
    int hours = (PlayTime / (60*60)) % 24;
    int minutes = (PlayTime / 60) % 60;
    int seconds = PlayTime % 60;

    SPrintf(str, "Days: %d | Hours: %d | Minutes %d | Seconds %d", days, hours, minutes, seconds);

    init+=str;
    return init+= " {Playtime value is in seconds}";
}

string HairStyleString(u8 HairStyle)
{
    string init = "Values: Male: 0x0 -> 0x10, Female: 0x11 -> 0x21 Current: ";
    string hair;

    if (HairStyle == 17)
        return init += "Male #17 - Bed Head";

    else if (HairStyle == 34)
        return init += "Female #17 - Bed Head";

    else if (HairStyle >= 0 && HairStyle <= 16)
    {
        SPrintf(hair, "Male #%d", HairStyle);
        return init += hair;
    }

    else if (HairStyle >= 18 && HairStyle <= 33)
    {
        HairStyle -= 0x11;
        SPrintf(hair, "Female #%d", HairStyle);
        return init += hair;
    }

    else
        return init += "Invalid Hair";
}

string EmoteString(u8 Emote)
{
    string init = "Emote: ";

    switch (Emote)
    {
        case 0x1:
            return init += "Happiness";
        case 0x2:
            return init += "Laughter";
        case 0x3: 
            return init += "Joy";
        case 0x4: 
            return init += "Love";
        case 0x5: 
            return init += "Glee";
        case 0x6: 
            return init += "Anger";
        case 0x7: 
            return init += "Aggravation";
        case 0x8: 
            return init += "Outrage";
        case 0x9: 
            return init += "Worry";
        case 0xA: 
            return init += "Sighing";
        case 0xB: 
            return init += "Thought";
        case 0xC: 
            return init += "Sadness";
        case 0xD: 
            return init += "Distress";
        case 0xE: 
            return init += "Sorrow";
        case 0x10: 
            return init += "Surprise";
        case 0x11: 
            return init += "Disbelief";
        case 0x12: 
            return init += "Shocked";
        case 0x13: 
            return init += "Cold Chill";
        case 0x14: 
            return init += "Fearful";
        case 0x15: 
            return init += "Agreement";
        case 0x16: 
            return init += "Inspiration";
        case 0x17: 
            return init += "Curiosity";
        case 0x18: 
            return init += "Heartbreak";
        case 0x19: 
            return init += "Sleepy";
        case 0x1A: 
            return init += "Bashfulness";
        case 0x1B: 
            return init += "Resignation";
        case 0x1C: 
            return init += "Mischief";
        case 0x1D: 
            return init += "Delight";
        case 0x1E: 
            return init += "Sneezing";
        case 0x20: 
            return init += "Greetings";
        case 0x21: 
            return init += "Pride";
        case 0x24: 
            return init += "Sheepishness";
        case 0x26: 
            return init += "Sunniness";
        case 0x27: 
            return init += "Shyness";
        case 0x28: 
            return init += "Disagreement";
        case 0x29: 
            return init += "Mistaken";
        case 0x2A: 
            return init += "Flourish";
        case 0x2B: 
            return init += "Daydreaming";
        case 0x2C: 
            return init += "Showmanship";
        case 0x2E: 
            return init += "Shrunk Funk Shuffle";
        default:
            return init += "Invalid Emote!";    
    }
}

string HHAHouseThemeString(u8 Theme)
{
    string init = "House Theme: ";

    switch (Theme)
    {
        case 0x0:
            return init += "Harmonious";
        case 0x1:
            return init += "Antique";
        case 0x2:
            return init += "Rusty";
        case 0x3: 
            return init += "Trendy";
        case 0x4: 
            return init += "Fairy Tale";
        case 0x5: 
            return init += "Toy Shop";
        case 0x6: 
            return init += "Sci-Fi";
        case 0x7: 
            return init += "Quirky";
        case 0x8: 
            return init += "No Theme";
        default:
            return init += "Invalid House Theme";    
    }
}

string HHAHouseEvaluatedString(u8 Eval)
{
    string init = "Evaluation Type: ";

    if ((Eval & 1))
    {
        if ((Eval & 2)) // & 3
            return init += "Indoor and Exterior";
        
        else return init += "Indoor Only";
    }
    else return init += "Not Evaluated";
}

string HHAWhatsNewString(u8 New)
{
    string init = "Lyle's \"What's New\" Topic: ";

    //u8 done = agree&2 ? 0xD : 0x0; Can't do a 2nd arg so doesn't work, rip

    switch (New/*+done*/)
    {
        case 0x0: //0x0
            return init += "Able Sisters";
        case 0x1: //0x8
            return init += "Leif";
        case 0x2: //0x10
            return init += "Racoon Brothers";
        case 0x3: //0x18
            return init += "Gracie";
        case 0x4: //0x20
            return init += "Shampoodle";
        case 0x5: //0x28
            return init += "Dr. Shrunk";
        case 0x6: //0x30
            return init += "K.K. Slider";
        case 0x7: //0x38
            return init += "Phyllis";
        case 0x8: //0x40
            return init += "Celeste";
        case 0x9: //0x48
            return init += "Reset Centre/Resetti";
        case 0xA: //0x50
            return init += "Lyle: Chess";
        case 0xB: //0x58
            return init += "Lyle: Daughters";
        case 0xC: //0x60
            return init += "NPC Gave Tasty Food";

        /*  Already Talked Messages */
        case 0xD: //0x68
            return init += "Able Sisters Work Hard (Talked Msg)";
        case 0xE: //0x70
            return init += "Leif's Weed Pulling Contest (Talked Msg)";
        case 0xF: //0x78
            return init += "Can't tell Timmy & Tommy Apart (Talked Msg)";
        case 0x10: //0x80
            return init += "Gracie Furniture Expensive, Gracie is Amazing (Talked Msg)";
        case 0x11: //0x88
            return init += "Harriet has \"Winning\" Personality (Talked Msg)";
        case 0x12: //0x90
            return init += "People Don't Know About Shrunk's \"Comedy Chops\" (Talked Msg)";
        case 0x13: //0x98
            return init += "Can Request Songs from K.K. on Saturdays (Talked Msg)";
        case 0x14: //0xA0
            return init += "Phyllis Is Very Serious. \"Nose to the grindstone!\" (Talked Msg)";
        case 0x15: //0xA8
            return init += "Blathers & Celeste Get Along Well. Feels Like Needs a PhD When Talking. (Talked Msg)";
        case 0x16: //0xB0
            return init += "Can't Talk About Reset Centre/Resetti Secrets (Talked Msg)";
        case 0x17: //0xB8
            return init += "Nook's \"Becoming a chess master\" (Talked Msg)";
        case 0x18: //0xC0
            return init += "Everyone in Lyle's Family Looks The Same; Resentment From Daughters. (Talked Msg)";
        case 0x19: //0xC8
            return init += "Shop Is Friendly, Stop by Anytime. (Talked Msg)";
        default:
            return init += "???";    
    }
}

/* EXTRA STRUCTS */

typedef struct MiiData
{
    u8 MiiFace[92] <format=hex,comment="Based on https://3dbrew.org/wiki/Mii#Mii_format">; //0x5538 -> 0x5595
    u16 ZeroPad_1 <format=hex,comment="U16 Zero Padding; Always 0x0000">;  //0x5594
    u16 Mii_CRC16 <format=hex>;
    u32 AES_CCM_MAC[4] <format=hex>;
    u8 Unknown2[24];            //0x5596 -> 0x55BF: Gets written to when getting a Mii form Harriet. Never read(?)
    u8 ZeroPad_3[30];           //0x55C0 -> 0x55DF
    u16  ZeroPad_2;

};

typedef struct Mannequin
{
    Item Hat  <format=hex,comment="Item ID < 0xXXXX">;
    Item Accessory <format=hex,comment="Item ID < 0xXXXX">;
    Item TopWear <format=hex,comment="Item ID < 0xXXXX">;
    Item BottomWear <format=hex,comment="Item ID < 0xXXXX">;
    Item Socks <format=hex,comment="Item ID < 0xXXXX">;
    Item Shoes <format=hex,comment="Item ID < 0xXXXX">;
};

typedef struct Villager_Status
{
    u8 IsBoxed : 1;
    u8 HasMoved : 1;
    u8 Unknown3 : 1;
    u8 Unknown4 : 1;
    u8 Unknown5 : 1;
    u8 Unknown6 : 1;
    u8 Unknown7 : 1;
    u8 Unknown8 : 1;
    u8 Unknown9 : 1;
    u8 Unknown10 : 1;
    u8 Unknown11 : 1;
    u8 Unknown12 : 1;
    u8 Unknown13 : 1;
    u8 RealtedToBelowButUnk : 1;
    u8 MovingToAnotherTown : 1;
    u8 Unknown16 : 1;
    u8 Unknown17 : 1;
    u8 Unknown18 : 1;
    u8 Unknown19 : 1;
    u8 Unknown20 : 1;
    u8 Unknown21 : 1;
    u8 Unknown22 : 1;
    u8 Unknown23 : 1;
    u8 Unknown24 : 1;
    u8 Unknown25 : 1;
    u8 Unknown26 : 1;
    u8 Unknown27 : 1;
    u8 Unknown28 : 1;
    u8 Unknown29 : 1;
    u8 Unknown30 : 1;
    u8 Unknown31 : 1;
    u8 Unknown32 : 1;
};

typedef struct Player_Flags
{
    u8 Unknown1 : 1;
    u8 Unknown2 : 1;
    u8 Unknown3 : 1;
    u8 Unknown4 : 1;
    u8 Unknown5 : 1;
    u8 Unknown6 : 1;
    u8 Unknown7 : 1;
    u8 Unknown8 : 1;
    u8 Unknown9 : 1;
    u8 Unknown10 : 1;
    u8 Unknown11 : 1;
    u8 Unknown12 : 1;
    u8 Unknown13 : 1;
    u8 Unknown14 : 1;
    u8 Unknown15 : 1;
    u8 Unknown16 : 1;
    u8 Unknown17 : 1;
    u8 Unknown18 : 1;
    u8 Unknown19 : 1;
    u8 Unknown20 : 1;
    u8 Unknown21 : 1;
    u8 Unknown22 : 1;
    u8 Unknown23 : 1;
    u8 Unknown24 : 1;
    u8 Unknown25 : 1;
    u8 Unknown26 : 1;
    u8 Unknown27 : 1;
    u8 Unknown28 : 1;
    u8 BlathersIntroduced : 1;
    u8 Unknown30 : 1;
    u8 Unknown31 : 1;
    u8 Unknown32 : 1;
    u8 Unknown33 : 1;
    u8 Unknown34 : 1;
    u8 Unknown35 : 1;
    u8 Unknown36 : 1;
    u8 Unknown37 : 1;
    u8 Unknown38 : 1;
    u8 Unknown39 : 1;
    u8 Unknown40 : 1;
    u8 KnowIsabelleName : 1;
    u8 Unknown42 : 1;
    u8 Unknown43 : 1;
    u8 Unknown44 : 1;
    u8 Unknown45 : 1;
    u8 Unknown46 : 1;
    u8 Unknown47 : 1;
    u8 Unknown48 : 1;
    u8 Unknown49 : 1;
    u8 Unknown50 : 1;
    u8 Unknown51 : 1;
    u8 Unknown52 : 1;
    u8 Unknown53 : 1;
    u8 Unknown54 : 1;
    u8 Unknown55 : 1;
    u8 Unknown56 : 1;
    u8 Unknown57 : 1;
    u8 Unknown58 : 1;
    u8 Unknown59 : 1;
    u8 Unknown60 : 1;
    u8 Unknown61 : 1;
    u8 Unknown62 : 1;
    u8 Unknown63 : 1;
    u8 Unknown64 : 1;
    u8 Unknown65 : 1;
    u8 Unknown66 : 1;
    u8 Unknown67 : 1;
    u8 Unknown68 : 1;
    u8 Unknown69 : 1;
    u8 Unknown70 : 1;
    u8 Unknown71 : 1;
    u8 Unknown72 : 1;
    u8 Unknown73 : 1;
    u8 Unknown74 : 1;
    u8 Unknown75 : 1;
    u8 Unknown76 : 1;
    u8 Unknown77 : 1;
    u8 Unknown78 : 1;
    u8 Unknown79 : 1;
    u8 Unknown80 : 1;
    u8 Unknown81 : 1;
    u8 ResetPending : 1;
    u8 Unknown83 : 1;
    u8 Unknown84 : 1;
    u8 Unknown85 : 1;
    u8 Unknown86 : 1;
    u8 Unknown87 : 1;
    u8 Unknown88 : 1;
    u8 Unknown89 : 1;
    u8 Unknown90 : 1;
    u8 Unknown91 : 1;
    u8 Unknown92 : 1;
    u8 Unknown93 : 1;
    u8 Unknown94 : 1;
    u8 Unknown95 : 1;
    u8 Unknown96 : 1;
    u8 Unknown97 : 1;
    u8 Unknown98 : 1;
    u8 Unknown99 : 1;
    u8 Unknown100 : 1;
    u8 Unknown101 : 1;
    u8 Unknown102 : 1;
    u8 Unknown103 : 1;
    u8 Unknown104 : 1;
    u8 Unknown105 : 1;
    u8 Unknown106 : 1;
    u8 Unknown107 : 1;
    u8 Unknown108 : 1;
    u8 Unknown109 : 1;
    u8 Unknown110 : 1;
    u8 Unknown111 : 1;
    u8 Unknown112 : 1;
    u8 Unknown113 : 1;
    u8 Unknown114 : 1;
    u8 Unknown115 : 1;
    u8 Unknown116 : 1;
    u8 Unknown117 : 1;
    u8 Unknown118 : 1;
    u8 HasBeeSting : 1;
    u8 Unknown120 : 1;
    u8 Unknown121 : 1;
    u8 Unknown122 : 1;
    u8 Unknown123 : 1;
    u8 CanTravel : 1; //i.e. can use train
    u8 Unknown125 : 1;
    u8 Unknown126 : 1;
    u8 Unknown127 : 1;
    u8 Unknown128 : 1;
    u8 Unknown129 : 1;
    u8 Unknown130 : 1;
    u8 Unknown131 : 1;
    u8 Unknown132 : 1;
    u8 Unknown133 : 1;
    u8 Unknown134 : 1;
    u8 Unknown135 : 1;
    u8 Unknown136 : 1;
    u8 Unknown137 : 1;
    u8 Unknown138 : 1;
    u8 Unknown139 : 1;
    u8 Unknown140 : 1;
    u8 Unknown141 : 1;
    u8 Unknown142 : 1;
    u8 Unknown143 : 1;
    u8 Unknown144 : 1;
    u8 Unknown145 : 1;
    u8 Unknown146 : 1;
    u8 Unknown147 : 1;
    u8 Unknown148 : 1;
    u8 Unknown149 : 1;
    u8 Unknown150 : 1;
    u8 Unknown151 : 1;
    u8 Unknown152 : 1;
    u8 Unknown153 : 1;
    u8 Unknown154 : 1;
    u8 RecievedHHSIntro : 1;
    u8 Unknown156 : 1;
    u8 Unknown157 : 1;
    u8 Unknown158 : 1;
    u8 Unknown159 : 1;
    u8 Unknown160 : 1;
    u8 Unknown161 : 1;
    u8 Unknown162 : 1;
    u8 Unknown163 : 1;
    u8 Unknown164 : 1;
    u8 Unknown165 : 1;
    u8 Unknown166 : 1;
    u8 Unknown167 : 1;
    u8 Unknown168 : 1;
    u8 Unknown169 : 1;
    u8 Unknown170 : 1;
    u8 Unknown171 : 1;
    u8 Unknown172 : 1;
    u8 Unknown173 : 1;
    u8 Unknown174 : 1;
    u8 Unknown175 : 1;
    u8 Unknown176 : 1;
    u8 Unknown177 : 1;
    u8 Unknown178 : 1;
    u8 Unknown179 : 1;
    u8 Unknown180 : 1;
    u8 Unknown181 : 1;
    u8 Unknown182 : 1;
    u8 Unknown183 : 1;
    u8 Unknown184 : 1;
    u8 Unknown185 : 1;
    u8 Unknown186 : 1;
    u8 Unknown187 : 1;
    u8 Unknown188 : 1;
    u8 Unknown189 : 1;
    u8 Unknown190 : 1;
    u8 Unknown191 : 1;
    u8 Unknown192 : 1;
    u8 Unknown193 : 1;
    u8 Unknown194 : 1;
    u8 Unknown195 : 1;
    u8 Unknown196 : 1;
    u8 Unknown197 : 1;
    u8 Unknown198 : 1;
    u8 Unknown199 : 1;
    u8 Unknown200 : 1;
    u8 Unknown201 : 1;
    u8 Unknown202 : 1;
    u8 Unknown203 : 1;
    u8 Unknown204 : 1;
    u8 Unknown205 : 1;
    u8 Unknown206 : 1;
    u8 Unknown207 : 1;
    u8 Unknown208 : 1;
    u8 Unknown209 : 1;
    u8 Unknown210 : 1;
    u8 Unknown211 : 1;
    u8 Unknown212 : 1;
    u8 Unknown213 : 1;
    u8 Unknown214 : 1;
    u8 Unknown215 : 1;
    u8 Unknown216 : 1;
    u8 Unknown217 : 1;
    u8 Unknown218 : 1;
    u8 Unknown219 : 1;
    u8 Unknown220 : 1;
    u8 Unknown221 : 1;
    u8 Unknown222 : 1;
    u8 Unknown223 : 1;
    u8 Unknown224 : 1;
    u8 Unknown225 : 1;
    u8 Unknown226 : 1;
    u8 Unknown227 : 1;
    u8 Unknown228 : 1;
    u8 Unknown229 : 1;
    u8 Unknown230 : 1;
    u8 Unknown231 : 1;
    u8 Unknown232 : 1;
    u8 Unknown233 : 1;
    u8 Unknown234 : 1;
    u8 Unknown235 : 1;
    u8 Unknown236 : 1;
    u8 Unknown237 : 1;
    u8 Unknown238 : 1;
    u8 Unknown239 : 1;
    u8 Unknown240 : 1;
    u8 Unknown241 : 1;
    u8 Unknown242 : 1;
    u8 Unknown243 : 1;
    u8 Unknown244 : 1;
    u8 Unknown245 : 1;
    u8 Unknown246 : 1;
    u8 Unknown247 : 1;
    u8 Unknown248 : 1;
    u8 Unknown249 : 1;
    u8 Unknown250 : 1;
    u8 HasClubTortimerMembership : 1;
    u8 Unknown252 : 1;
    u8 Unknown253 : 1;
    u8 Unknown254 : 1;
    u8 Unknown255 : 1;
    u8 Unknown256 : 1;
    u8 Unknown257 : 1;
    u8 Unknown258 : 1;
    u8 Unknown259 : 1;
    u8 Unknown260 : 1;
    u8 Unknown261 : 1;
    u8 Unknown262 : 1;
    u8 Unknown263 : 1;
    u8 Unknown264 : 1;
    u8 Unknown265 : 1;
    u8 Unknown266 : 1;
    u8 Unknown267 : 1;
    u8 Unknown268 : 1;
    u8 Unknown269 : 1;
    u8 Unknown270 : 1;
    u8 Unknown271 : 1;
    u8 Unknown272 : 1;
    u8 Unknown273 : 1;
    u8 Unknown274 : 1;
    u8 Unknown275 : 1;
    u8 Unknown276 : 1;
    u8 Unknown277 : 1;
    u8 Unknown278 : 1;
    u8 Unknown279 : 1;
    u8 Unknown280 : 1;
    u8 Unknown281 : 1;
    u8 Unknown282 : 1;
    u8 Unknown283 : 1;
    u8 Unknown284 : 1;
    u8 Unknown285 : 1;
    u8 Unknown286 : 1;
    u8 Unknown287 : 1;
    u8 Unknown288 : 1;
    u8 Unknown289 : 1;
    u8 Unknown290 : 1;
    u8 Unknown291 : 1;
    u8 Unknown292 : 1;
    u8 Unknown293 : 1;
    u8 Unknown294 : 1;
    u8 Unknown295 : 1;
    u8 Unknown296 : 1;
    u8 Unknown297 : 1;
    u8 Unknown298 : 1;
    u8 Unknown299 : 1;
    u8 Unknown300 : 1;
    u8 Unknown301 : 1;
    u8 Unknown302 : 1;
    u8 Unknown303 : 1;
    u8 Unknown304 : 1;
    u8 Unknown305 : 1;
    u8 Unknown306 : 1;
    u8 Unknown307 : 1;
    u8 Unknown308 : 1;
    u8 Unknown309 : 1;
    u8 Unknown310 : 1;
    u8 Unknown311 : 1;
    u8 Unknown312 : 1;
    u8 Unknown313 : 1;
    u8 Unknown314 : 1;
    u8 Unknown315 : 1;
    u8 Unknown316 : 1;
    u8 Unknown317 : 1;
    u8 Unknown318 : 1;
    u8 Unknown319 : 1;
    u8 Unknown320 : 1;
    u8 Unknown321 : 1;
    u8 Unknown322 : 1;
    u8 Unknown323 : 1;
    u8 Unknown324 : 1;
    u8 Unknown325 : 1;
    u8 Unknown326 : 1;
    u8 Unknown327 : 1;
    u8 Unknown328 : 1;
    u8 Unknown329 : 1;
    u8 Unknown330 : 1;
    u8 Unknown331 : 1;
    u8 Unknown332 : 1;
    u8 Unknown333 : 1;
    u8 Unknown334 : 1;
    u8 Unknown335 : 1;
    u8 Unknown336 : 1;
    u8 Unknown337 : 1;
    u8 Unknown338 : 1;
    u8 Unknown339 : 1;
    u8 Unknown340 : 1;
    u8 Unknown341 : 1;
    u8 Unknown342 : 1;
    u8 Unknown343 : 1;
    u8 Unknown344 : 1;
    u8 Unknown345 : 1;
    u8 Unknown346 : 1;
    u8 Unknown347 : 1;
    u8 Unknown348 : 1;
    u8 Unknown349 : 1;
    u8 Unknown350 : 1;
    u8 Unknown351 : 1;
    u8 Unknown352 : 1;
    u8 Unknown353 : 1;
    u8 Unknown354 : 1;
    u8 Unknown355 : 1;
    u8 Unknown356 : 1;
    u8 Unknown357 : 1;
    u8 Unknown358 : 1;
    u8 Unknown359 : 1;
    u8 RecievedCATIntro : 1;
    u8 Unknown361 : 1;
    u8 Unknown362 : 1;
    u8 Unknown363 : 1;
    u8 Unknown364 : 1;
    u8 Unknown365 : 1;
    u8 Unknown366 : 1;
    u8 Unknown367 : 1;
    u8 Unknown368 : 1;
    u8 Unknown369 : 1;
    u8 Unknown370 : 1;
    u8 Unknown371 : 1;
    u8 Unknown372 : 1;
    u8 Unknown373 : 1;
    u8 Unknown374 : 1;
    u8 Unknown375 : 1;
    u8 Unknown376 : 1;
    u8 Unknown377 : 1;
    u8 Unknown378 : 1;
    u8 Unknown379 : 1;
    u8 Unknown380 : 1;
    u8 Unknown381 : 1;
    u8 Unknown382 : 1;
    u8 CanUseCensusMenu : 1;
    u8 Unknown384 : 1;
    u8 Unknown385 : 1;
    u8 Unknown386 : 1;
    u8 Unknown387 : 1;
    u8 Unknown388 : 1;
    u8 Unknown389 : 1;
    u8 Unknown390 : 1;
    u8 Unknown391 : 1;
    u8 Unknown392 : 1;
    u8 Unknown393 : 1;
    u8 Unknown394 : 1;
    u8 Unknown395 : 1;
    u8 Unknown396 : 1;
    u8 Unknown397 : 1;
    u8 Unknown398 : 1;
    u8 Unknown399 : 1;
    u8 Unknown400 : 1;
    u8 Unknown401 : 1;
    u8 Unknown402 : 1;
    u8 Unknown403 : 1;
    u8 Unknown404 : 1;
    u8 Unknown405 : 1;
    u8 Unknown406 : 1;
    u8 Unknown407 : 1;
    u8 Unknown408 : 1;
    u8 Unknown409 : 1;
    u8 Unknown410 : 1;
    u8 Unknown411 : 1;
    u8 Unknown412 : 1;
    u8 Unknown413 : 1;
    u8 Unknown414 : 1;
    u8 Unknown415 : 1;
    u8 Unknown416 : 1;
};

typedef struct Town_Flags
{
    u8 Unknown1 : 1;
    u8 EarlyBirdOrdinance : 1;
    u8 NightOwlOrdinance  : 1;
    u8 BellBoomOrdinance  : 1;
    u8 BeautifulOrdinance : 1;
    u8 Unknown6 : 1;
    u8 Unknown7 : 1;
    u8 Unknown8 : 1;
    u8 Unknown9 : 1;
    u8 Unknown10 : 1;
    u8 Unknown11 : 1;
    u8 Unknown12 : 1;
    u8 Unknown13 : 1;
    u8 Unknown14 : 1;
    u8 Unknown15 : 1;
    u8 Unknown16 : 1;
    u8 Unknown17 : 1;
    u8 Unknown18 : 1;
    u8 Unknown19 : 1;
    u8 Unknown20 : 1;
    u8 Unknown21 : 1;
    u8 Unknown22 : 1;
    u8 Unknown23 : 1;
    u8 Unknown24 : 1;
    u8 Unknown25 : 1;
    u8 Unknown26 : 1;
    u8 Unknown27 : 1;
    u8 Unknown28 : 1;
    u8 Unknown29 : 1;
    u8 Unknown30 : 1;
    u8 Unknown31 : 1;
    u8 Unknown32 : 1;
    u8 Unknown33 : 1;
    u8 Unknown34 : 1;
    u8 Unknown35 : 1;
    u8 Unknown36 : 1;
    u8 Unknown37 : 1;
    u8 Unknown38 : 1;
    u8 Unknown39 : 1 <comment="ctor sets this bit">;
    u8 Unknown40 : 1;
    u8 Unknown41 : 1;
    u8 Unknown42 : 1;
    u8 Unknown43 : 1;
    u8 Unknown44 : 1;
    u8 Unknown45 : 1;
    u8 Unknown46 : 1;
    u8 Unknown47 : 1;
    u8 Unknown48 : 1;
    u8 Unknown49 : 1;
    u8 Unknown50 : 1;
    u8 Unknown51 : 1;
    u8 Unknown52 : 1;
    u8 Unknown53 : 1;
    u8 Unknown54 : 1;
    u8 Unknown55 : 1;
    u8 Unknown56 : 1;
    u8 Unknown57 : 1;
    u8 Unknown58 : 1;
    u8 Unknown59 : 1;
    u8 Unknown60 : 1;
    u8 Unknown61 : 1;
    u8 Unknown62 : 1;
    u8 Unknown63 : 1;
    u8 Unknown64 : 1;
    u8 Unknown65 : 1;
    u8 Unknown66 : 1;
    u8 Unknown67 : 1;
    u8 Unknown68 : 1;
    u8 Unknown69 : 1;
    u8 Unknown70 : 1;
    u8 Unknown71 : 1;
    u8 Unknown72 : 1;
    u8 Unknown73 : 1 <comment="ctor sets this bit">;
    u8 Unknown74 : 1 <comment="ctor sets this bit">;
    u8 Unknown75 : 1 <comment="ctor sets this bit">;
    u8 Unknown76 : 1;
    u8 Unknown77 : 1;
    u8 Unknown78 : 1;
    u8 Unknown79 : 1;
    u8 Unknown80 : 1;
    u8 Unknown81 : 1;
    u8 Unknown82 : 1;
    u8 Unknown83 : 1;
    u8 Unknown84 : 1;
    u8 Unknown85 : 1;
    u8 Unknown86 : 1;
    u8 Unknown87 : 1;
    u8 Unknown88 : 1;
    u8 Unknown89 : 1;
    u8 Unknown90 : 1;
    u8 Unknown91 : 1;
    u8 Unknown92 : 1;
    u8 Unknown93 : 1;
    u8 Unknown94 : 1;
    u8 Unknown95 : 1;
    u8 Unknown96 : 1;
    u8 Unknown97 : 1;
    u8 Unknown98 : 1;
    u8 Unknown99 : 1;
    u8 Unknown100 : 1;
    u8 Unknown101 : 1;
    u8 Unknown102 : 1;
    u8 Unknown103 : 1;
    u8 Unknown104 : 1;
    u8 Unknown105 : 1;
    u8 Unknown106 : 1;
    u8 Unknown107 : 1;
    u8 Unknown108 : 1;
    u8 Unknown109 : 1;
    u8 Unknown110 : 1;
    u8 Unknown111 : 1;
    u8 Unknown112 : 1;
    u8 Unknown113 : 1;
    u8 Unknown114 : 1;
    u8 Unknown115 : 1;
    u8 Unknown116 : 1;
    u8 Unknown117 : 1;
    u8 Unknown118 : 1;
    u8 Unknown119 : 1;
    u8 Unknown120 : 1;
    u8 Unknown121 : 1;
    u8 Unknown122 : 1;
    u8 Unknown123 : 1;
    u8 Unknown124 : 1;
    u8 Unknown125 : 1;
    u8 Unknown126 : 1;
    u8 Unknown127 : 1;
    u8 Unknown128 : 1;
    u8 Unknown129 : 1;
    u8 Unknown130 : 1;
    u8 Unknown131 : 1;
    u8 Unused1 : 1;
    u8 Unused2 : 1;
    u8 Unused3 : 1;
    u8 Unused4 : 1;
};

typedef struct TownID
{
	u16 	 TID <format=hex, comment="Default is 0 (Player ctor)">;
	wchar_t  DataTownName[9] <comment="Default is 0 (Player ctor)">;
    u8 Unknown01 <comment="Default is 0xA (Player ctor)">;
    u8 Unknown02 <comment="Just Padding??">;

};

typedef struct PersonalID
{
	u16   PID <format=hex>;
    wchar_t  PlayerName[9];
	u8    Gender;
    u8    ZeroPad;
    TownID   TownData;
    u8    TPC_Country;
    u8    TPC_County;

};

typedef struct BDGValues
{
    u64 Badge_Fishes_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_Bugs_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_Marine_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_FishColl_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_BugColl_Value <format=hex,comment=DecryptACNLValue >;     //Encrypted Value
    u64 Badge_MarineColl_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_Balloons_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_Visiting_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_Hosting_Value <format=hex,comment=DecryptACNLValue >;     //Encrypted Value
    u64 Badge_Gardening_Value <format=hex,comment=DecryptACNLValue >;       //Encrypted Value
    u64 Badge_Bank_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_Turnips_Value <format=hex,comment=DecryptACNLValue >;     //Encrypted Value
    u64 Badge_Medals_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_Streetpass_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_Weeding_Value <format=hex,comment=DecryptACNLValue >;     //Encrypted Value
    u64 Badge_Shopping_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_LetterWriter_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_Refurbish_Value <format=hex,comment=DecryptACNLValue >;       //Encrypted Value
    u64 Badge_Catalog_Value <format=hex,comment=DecryptACNLValue >;     //Encrypted Value
    u64 Badge_KK_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_HHAScore_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_PlayTime_Value <format=hex,comment=DecryptACNLValue >;        //Encrypted Value
    u64 Badge_Helper_Value <format=hex,comment=DecryptACNLValue >;      //Encrypted Value
    u64 Badge_Dream_Value <format=hex,comment=DecryptACNLValue >;       //Encrypted Value      
};

typedef struct BDG
{
    u8 Badge_Fishes;
    u8 Badge_Bugs;
    u8 Badge_Marine;
    u8 Badge_FishColl;
    u8 Badge_BugColl;
    u8 Badge_MarineColl;
    u8 Badge_Balloons;
    u8 Badge_Visiting;
    u8 Badge_Hosting;
    u8 Badge_Gardening;
    u8 Badge_Bank;
    u8 Badge_Turnips;
    u8 Badge_Medals;
    u8 Badge_Streetpass;
    u8 Badge_Weeding;
    u8 Badge_Shopping;
    u8 Badge_LetterWriter;
    u8 Badge_Refurbish;
    u8 Badge_Catalog;
    u8 Badge_KK;
    u8 Badge_HHAScore;
    u8 Badge_PlayTime;
    u8 Badge_Helper;
    u8 Badge_Dream;   
};

typedef struct PlayerBadges
{
    BDGValues   BadgeValues;            //0x567C: 24 badges (encrypted values)
    BDG         Badges;					//0x573C: 24 badges
    u64 Unknown1 <format=hex,comment=DecryptACNLValue >; //0x5754 -> 0x575B: Encrypted Value
    u64 Unknown1_1 <format=hex,comment=DecryptACNLValue >; //0x575C -> 0x5763: Encrypted Value

};

typedef struct HHAHouseInfo
{
    s32  HHAHousePoints;                                   //0x5764 -> 0x5767
    u16 HHAItem1 <format=hex, comment="Only used if no theme">;                        //0x5768 -> 0x5777
    u16 HHAItem2 <format=hex, comment="Only used if no theme">;                        //0x5768 -> 0x5777
    u16 HHAItem3 <format=hex, comment="Only used if no theme">;                        //0x5768 -> 0x5777
    u16 HHAItem4 <format=hex, comment="Only used if no theme">;                        //0x5768 -> 0x5777
    u16 HHAItem5 <format=hex, comment="Only used if no theme">;                        //0x5768 -> 0x5777
    u16 Item_Exterior <format=hex, comment="Only used if you have a theme">;                        //0x5768 -> 0x5777
    u16 Item_Interior <format=hex, comment="Only used if you have a theme">;                        //0x5768 -> 0x5777
    u16 HHAItem7 <format=hex, comment="Only used if you have a theme">;                        //0x5768 -> 0x5777
    u8 CurrentHouseTheme <comment=HHAHouseThemeString>;  //0x5778 -> 0x5778
    u8 EvaluationType <comment=HHAHouseEvaluatedString>;   //0x5779 -> 0x5779
    u8 HouseUnk0 <comment="Valid values: 0, 1, 2, 3">; //0x577A -> 0x577A
    u8 HouseUnk1 <comment=" ">;    //0x577B -> 0x577B
    u8 HouseUnk2 <comment="Read if HouseUnk0==3">; //0x577C -> 0x577C
    u8 HouseUnk3 <comment=" ">;                          //0x577D -> 0x577D
    u8 HouseUnk4 <comment=" ">;                          //0x577E -> 0x577E
    u8 HouseUnk5 <comment=" ">;                          //0x577F -> 0x577F
    u8 HouseUnk6 <comment=" ">;                          //0x5780 -> 0x5780
    u8 HouseUnk7 <comment=" ">;                          //0x5781 -> 0x5781
    u8 HouseUnk8 <comment=" ">;                          //0x577E -> 0x577E
    u8 HouseUnk9 <comment=" ">;                          //0x577E -> 0x577E
    u8 HouseUnk10 <comment=" ">;                          //0x577E -> 0x577E
    u8 HouseExteriorObeyingTheme <comment="Not Verified; 5 is max, 0 = Not obeying(?); higher better(?)">; //0x577E -> 0x577E
    u8 HouseInteriorObeyingTheme <comment="Not Verified; 5 is max, 0 = Not obeying(?); higher better(?)">; //0x577E -> 0x577E
    u8 WhichFloorWasImpressive <comment="Not Verified; 5 is max">;        //0x577E -> 0x577E
    u8 HouseUnk14 <comment=" ">;                          //0x577E -> 0x577E
    u8 HouseUnk15 <comment=" ">;                          //0x577E -> 0x577E
    u8 FutureAdvice <comment="Values: 0 - 10">;           //0x577E -> 0x577E
    u8 HHAAwardsUnlocked <comment="Not Verified; 8 is max">; //0x577E -> 0x577E
    u8 HHAAwardsRecieved <comment="Not Verified; 8 is max; 0 = None">; //0x577E -> 0x577E
    u8 GoldExteriorsUnlocked <comment="5 is max">; //0x577E -> 0x577E
    u8 GoldExteriorsApplied <comment="Not Verified; 5 is max">; //0x577E -> 0x577E
    u8 HouseUnk21 <comment=" ">;                          //0x577E -> 0x577E
};

typedef struct ACNL_DreamAddress
{
    u32 DCPart1 <format=hex, comment=" ">;
    u32 DCPart2 <format=hex, comment="Code checks it's less than 1, aka 0">;
    bool  Unk1 <format=hex, comment="bool">;
    u8  DCPart3 <format=hex, comment=" ">;
    u16 Padding <format=hex, comment=" ">;
};

string DreamCodeString(ACNL_DreamAddress &DC)
{
    string result;
    SPrintf(result, "Dream Code: %02X%02X-%04X-%04X", DC.DCPart3, DC.DCPart2, DC.DCPart1>>16, DC.DCPart1&0xFFFF);
    return result;

}

typedef struct ACNL_Pattern
{
	wchar_t Title[21];
	PersonalID CreatorData;
	u8   Palette[15];
	u8   UnusedChecksum <format=hex,comment="Default: 1, Set at 0x1B4F74 EUR 1.5">; //changing seems to have no effect
	u8   TenConstant; //seems to always be 0x0A
	u8   PatternType; //normal patterns: 0x09; dresses: 0x00; photo boards: 0x08
	u16  ZeroPad_2; //Zero Padding; Always 0x0000
	u8   PatternData1[512]; //mandatory
	u8   PatternData2[512]; //optional
	u8   PatternData3[512]; //optional
	u8   PatternData4[512]; //optional
	u32  ZeroPad_3; //Zero Padding; Optional

};

typedef struct ACNL_Letter
{
	PersonalID Reciever;
	u16  ZeroPad_1;
	u16   RecieverID; //
	u8   ZeroPad_2[50];
	u16  Unknown2; //Some form of ID?
	u16  ZeroPad_3;
	wchar_t Header[32]; //Max amount is 32 UTF-16 characters
	u16  ZeroPad_4;
	wchar_t Body[192]; //Max amount is 192 UTF-16 characters
	u16  ZeroPad_5;
	wchar_t Signature[32]; //Max amount is 32 UTF-16 characters
	u16  ZeroPad_6;
    u8   RecieverNameIndent;
    u8   PaperID;
    u8   LetterFlag;
    u8   StringIDOfSender;
    u8   LetterType;
    u8   Unknown2;
    Item AttachedItem;
    u64  Unknown3;
};

typedef struct ACNL_Building
{
    u16 ID <format=hex, comment="0xFC is none, only below 0xFC considered valid">;
    u8 XCoord;
    u8 YCoord;
};

typedef struct Player_Patterns
{
	ACNL_Pattern Pattern1;
	ACNL_Pattern Pattern2;
	ACNL_Pattern Pattern3;
	ACNL_Pattern Pattern4;
	ACNL_Pattern Pattern5;
	ACNL_Pattern Pattern6;
	ACNL_Pattern Pattern7;
	ACNL_Pattern Pattern8;
	ACNL_Pattern Pattern9;
	ACNL_Pattern Pattern10;

};

typedef struct Player_Letters
{
	ACNL_Letter Letter1;
	ACNL_Letter Letter2;
	ACNL_Letter Letter3;
	ACNL_Letter Letter4;
	ACNL_Letter Letter5;
	ACNL_Letter Letter6;
	ACNL_Letter Letter7;
	ACNL_Letter Letter8;
	ACNL_Letter Letter9;
	ACNL_Letter Letter10;

};

typedef struct Player_Dressers
{
    Item DrawerA[60];
    Item DrawerB[60];
    Item DrawerC[60];

};

typedef struct Player_Emotes
{
    u8 Emote1 <format=hex,comment=EmoteString>;
    u8 Emote2 <format=hex,comment=EmoteString>;
    u8 Emote3 <format=hex,comment=EmoteString>;
    u8 Emote4 <format=hex,comment=EmoteString>;
    u8 Emote5 <format=hex,comment=EmoteString>;
    u8 Emote6 <format=hex,comment=EmoteString>;
    u8 Emote7 <format=hex,comment=EmoteString>;
    u8 Emote8 <format=hex,comment=EmoteString>;
    u8 Emote9 <format=hex,comment=EmoteString>;
    u8 Emote10 <format=hex,comment=EmoteString>;
    u8 Emote11 <format=hex,comment=EmoteString>;
    u8 Emote12 <format=hex,comment=EmoteString>;
    u8 Emote13 <format=hex,comment=EmoteString>;
    u8 Emote14 <format=hex,comment=EmoteString>;
    u8 Emote15 <format=hex,comment=EmoteString>;
    u8 Emote16 <format=hex,comment=EmoteString>;
    u8 Emote17 <format=hex,comment=EmoteString>;
    u8 Emote18 <format=hex,comment=EmoteString>;
    u8 Emote19 <format=hex,comment=EmoteString>;
    u8 Emote20 <format=hex,comment=EmoteString>;
    u8 Emote21 <format=hex,comment=EmoteString>;
    u8 Emote22 <format=hex,comment=EmoteString>;
    u8 Emote23 <format=hex,comment=EmoteString>;
    u8 Emote24 <format=hex,comment=EmoteString>;
    u8 Emote25 <format=hex,comment=EmoteString>;
    u8 Emote26 <format=hex,comment=EmoteString>;
    u8 Emote27 <format=hex,comment=EmoteString>;
    u8 Emote28 <format=hex,comment=EmoteString>;
    u8 Emote29 <format=hex,comment=EmoteString>;
    u8 Emote30 <format=hex,comment=EmoteString>;
    u8 Emote31 <format=hex,comment=EmoteString>;
    u8 Emote32 <format=hex,comment=EmoteString>;
    u8 Emote33 <format=hex,comment=EmoteString>;
    u8 Emote34 <format=hex,comment=EmoteString>;
    u8 Emote35 <format=hex,comment=EmoteString>;
    u8 Emote36 <format=hex,comment=EmoteString>;
    u8 Emote37 <format=hex,comment=EmoteString>;
    u8 Emote38 <format=hex,comment=EmoteString>;
    u8 Emote39 <format=hex,comment=EmoteString>;
    u8 Emote40 <format=hex,comment=EmoteString>;
};

typedef struct Town_Buildings
{
    ACNL_Building Building1;
    ACNL_Building Building2;
    ACNL_Building Building3;
    ACNL_Building Building4;
    ACNL_Building Building5;
    ACNL_Building Building6;
    ACNL_Building Building7;
    ACNL_Building Building8;
    ACNL_Building Building9;
    ACNL_Building Building10;
    ACNL_Building Building11;
    ACNL_Building Building12;
    ACNL_Building Building13;
    ACNL_Building Building14;
    ACNL_Building Building15;
    ACNL_Building Building16;
    ACNL_Building Building17;
    ACNL_Building Building18;
    ACNL_Building Building19;
    ACNL_Building Building20;
    ACNL_Building Building21;
    ACNL_Building Building22;
    ACNL_Building Building23;
    ACNL_Building Building24;
    ACNL_Building Building25;
    ACNL_Building Building26;
    ACNL_Building Building27;
    ACNL_Building Building28;
    ACNL_Building Building29;
    ACNL_Building Building30;
    ACNL_Building Building31;
    ACNL_Building Building32;
    ACNL_Building Building33;
    ACNL_Building Building34;
    ACNL_Building Building35;
    ACNL_Building Building36;
    ACNL_Building Building37;
    ACNL_Building Building38;
    ACNL_Building Building39;
    ACNL_Building Building40;
    ACNL_Building Building41;
    ACNL_Building Building42;
    ACNL_Building Building43;
    ACNL_Building Building44;
    ACNL_Building Building45;
    ACNL_Building Building46;
    ACNL_Building Building47;
    ACNL_Building Building48;
    ACNL_Building Building49;
    ACNL_Building Building50;
    ACNL_Building Building51;
    ACNL_Building Building52;
    ACNL_Building Building53;
    ACNL_Building Building54;
    ACNL_Building Building55;
    ACNL_Building Building56;
    ACNL_Building EventPWP1;
    ACNL_Building EventPWP2;
};

typedef struct UnknownStruct1
{
    u32  Unk1 <format=hex, comment="Set to 0 in Player ctor">; //0
    u32  Unk2 <format=hex, comment="Set to 0 in Player ctor">; //4
    u8   Unk3 <format=hex, comment="Set to 0 in Player ctor">; //8
    u8   Unk4 <format=hex, comment="Set to 0x80 in Player ctor">; //9
    u16  Unk5 <format=hex, comment="Set to 0 in Player ctor">; //0xA
    u8  Unk6 <format=hex, comment="Set to 0xFF in Player ctor">; //0xC
    u32  Unk7 <format=hex, comment="Set to 0 in Player ctor (Set later, before 1st loop)">; //0xD
    u8  Unk8 <format=hex, comment="Set to 0 in Player ctor">; //0x11
    u8  Unk9 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x12
    u8  Padding1 <format=hex, comment="Padding: Not set in Player ctor">; //0x13
    u16  Unk11 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x14
    u8  Unk12 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x16
    u8  Padding2 <format=hex, comment="Padding: Not set in Player ctor">; //0x17
    u16  Unk14 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x18
    u8  Unk15 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x1A
    u8  Padding3 <format=hex, comment="Padding: Not set in Player ctor">; //0x1B
    u16  Unk17 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x1C
    u8  Unk18 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x1E
    u8  Padding4 <format=hex, comment="Padding: Not set in Player ctor">; //0x1F
    u16  Unk20 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x20
    u8  Unk21 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x22
    u8  Padding5 <format=hex, comment="Padding: Not set in Player ctor">; //0x23
    u16  Unk23 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x24
    u8  Unk24 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x26
    u8  Padding6 <format=hex, comment="Padding: Not set in Player ctor">; //0x27
    u16  Unk26 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x28
    u8  Unk27 <format=hex, comment="Set to 0 in Player ctor">; //0x2A
    u8  Padding7 <format=hex, comment="Padding: Not set in Player ctor">; //0x2B
    u16  Unk29 <format=hex, comment="Set to 0 in Player ctor (Set in 1st loop)">; //0x2C
    u8  Unk30 <format=hex, comment="Set to 0 in Player ctor">; //0x2E
    u8  Unk31 <format=hex, comment="Set to 0 in Player ctor">; //0x2F
    u16  Unk32 <format=hex, comment="Set to 0 in Player ctor">; //0x30
    u16  Unk33 <format=hex, comment="Set to 0 in Player ctor">; //0x32
    u32  Unk34 <format=hex, comment="Set to 0 in Player ctor">; //0x34
    u8  Unk35 <format=hex, comment="Set to 0 in Player ctor">; //0x38
    u8  Unk36 <format=hex, comment="Set to 0 in Player ctor">; //0x39
    u16  Unk37 <format=hex, comment="Set to 0 in Player ctor">; //0x3A
    u8  Unk38 <format=hex, comment="Set to 0 in Player ctor">; //0x3C
    u8  Unk39 <format=hex, comment="Set to 0 in Player ctor">; //0x3D
    u16  Unk40 <format=hex, comment="Set to 0 in Player ctor">; //0x3E
    u8  Unk41 <format=hex, comment="Set to 0 in Player ctor">; //0x40
    u8  Unk42 <format=hex, comment="Set to 1 in Player ctor">; //0x41
    u16  Unk43 <format=hex, comment="Set to 0 in Player ctor">; //0x42
    u8  Unk44 <format=hex, comment="Set to 0 in Player ctor">; //0x44
    u8  Unk45 <format=hex, comment="Set to 0 in Player ctor">; //0x45
    u16  Unk46 <format=hex, comment="Set to 0 in Player ctor">; //0x46
    u16  Unk47 <format=hex, comment="Set to 0 in Player ctor">; //0x48
    u16  Unk48 <format=hex, comment="Set to 0 in Player ctor">; //0x4A
    u32  Unk49 <format=hex, comment="Set to 0 in Player ctor">; //0x4C
    u8  Unk50 <format=hex, comment="Set to 0 in Player ctor">; //0x50
    u8  Unk51 <format=hex, comment="Set to 0 in Player ctor">; //0x51
    u16  Unk52 <format=hex, comment="Set to 0 in Player ctor">; //0x52
    u8  Unk53 <format=hex, comment="Set to 0 in Player ctor">; //0x54
    u8  Unk54 <format=hex, comment="Set to 0 in Player ctor">; //0x55
    u8  Unk55 <format=hex, comment="Set to 0 in Player ctor">; //0x56
    u8  Unk56 <format=hex, comment="Set to 0 in Player ctor">; //0x57
    u8  Unk57 <format=hex, comment="Set to 5 in Player ctor">; //0x58
    u8  Unk58 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x59
    u8  Unk59 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x5A
    u8  Unk60 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x5B
    u8  Unk61 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x5C
    u8  Unk62 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x5D
    u8  Unk63 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x5E
    u8  Unk64 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x5F
    u8  Unk65 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x60
    u8  Unk66 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x61
    u8  Unk67 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x62
    u8  Unk68 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x63
    u8  Unk69 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x64
    u8  Unk70 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x65
    u8  Unk71 <format=hex, comment="Set to 0 in Player ctor (Set in 2nd loop, BIC R2 R2 0xF)">; //0x66
    u8  Unk72 <format=hex, comment="Set to 0 in Player ctor">; //0x67
    u8  Unk73 <format=hex, comment="Set to 0 in Player ctor">; //0x68
    u8  Unk74 <format=hex, comment="Set to 0 in Player ctor">; //0x69
    TownID TownData; //0x6A -> 0x7F
};

typedef struct UnknownStruct2
{
    u32 Unknown5 <comment= "???; Set to 0, then 0xFFFFFFFF in player ctor">; //0x8B80
    u32 Unknown6 <comment= "???; Set to 0, then 0x7FFFFFFF in player ctor">; //0x8B84
    u8 Unknown7 <comment= "???; Set to 0 in player ctor">; //0x8B88
    u8 Unknown8 <comment= "???; Set to 0 in player ctor">; //0x8B89
    u32 Unknown9 <comment= "???; Set to 0 in player ctor">; //0x8B8A
    u16 Unknown10 <comment= "???; Set to 0 in player ctor">; //0x8B8E
    u8 Unknown11 <comment= "???; Set to 0 in player ctor">; //0x8B90
    u32 Unknown12 <comment= "???; Set to 0 in player ctor">; //0x8B91
    u16 Unknown13 <comment= "???; Set to 0 in player ctor">; //0x8B95
    u8 Unknown14 <comment= "???; Set to 0 in player ctor">; //0x8B97
    u8 Unknown15 <comment= "???; Set to 0x65 in player ctor">; //0x8B98
    u8 Unknown16 <comment= "???; Set to 0 in player ctor">; //0x8B99
    u8 Unknown17 <comment= "???; Set to 0 in player ctor">; //0x8B9A
    u8 Padding1 <comment= "Padding: Not set in player ctor">; //0x8B9B
    u8  Unknown19[0x198] <comment= "???; 0x198 buffer size set to 0 in player ctor">; //0x8B9C
    u8  Unknown20[0x66] <comment= "???; 0x66 buffer size set to 0 in player ctor">; //0x8D34
    u8 Padding2 <comment= "Padding: Not set in player ctor">; //0x8B9A
    u8 Padding3 <comment= "Padding: Not set in player ctor">; //0x8B9B
    u32 Unknown23 <comment= "???; Set to 0 in player ctor">; //0x8D9C
    u32 Unknown24 <comment= "???; Set to 0 in player ctor">; //0x8DA0
    u32 Unknown25 <comment= "???; Set to 0 in player ctor">; //0x8DA4
    u32 Unknown26 <comment= "???; Set to 0 in player ctor">; //0x8DA8
    u32 Unknown27 <comment= "???; Set to 0 in player ctor">; //0x8DAC
    u32 Unknown28 <comment= "???; Set to 0 in player ctor">; //0x8DB0
    u32 Unknown29 <comment= "???; Set to 0 in player ctor">; //0x8DB4
    u32 Unknown30 <comment= "???; Set to 0 in player ctor">; //0x8DBC
};

typedef struct UnknownStruct3
{
    s64 Unknown1 <format=hex, comment= "???; Set to 0, then 0x7FFFFFFFFFFFFFFF in player ctor">; //0x8DEC
    u8 Unknown2 <format=hex, comment= "???; Set to 0x21 in player ctor">; //0x8DF4
    u8 Unknown3 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8DF5
    u8 Unknown4 <format=hex, comment= "???; Set to 0x9 in player ctor">; //0x8DF6
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor">; //0x8DF7
    u16 Unknown6 <format=hex, comment= "???; Set to 0x0000 in player ctor">; //0x8DF8
    u8 Unknown7 <format=hex, comment= "???; Set to 0x6 in player ctor">; //0x8DFA
    u8 Unknown8 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8DFB
};

typedef struct UnknownStruct4 //Probably exact same struct as UnknownStruct3 but is set differently
{
    s64 Unknown1 <format=hex, comment= "???; Set to 0, then 0x7FFFFFFFFFFFFFFF in player ctor">; //0x8DEC
    u8 Unknown2 <format=hex, comment= "???; Set to 0x21 in player ctor">; //0x8DF4
    u8 Unknown3 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8DF5
    u8 Unknown4 <format=hex, comment= "???; Set to 0x9 in player ctor">; //0x8DF6
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor">; //0x8DF7
    u16 Unknown6 <format=hex, comment= "???; Set to 0x7ffe in player ctor">; //0x8DF8
    u8 Unknown7 <format=hex, comment= "???; Set to 0x4 in player ctor">; //0x8DFA
    u8 Unknown8 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8DFB
};

typedef struct UnknownStruct5 //Similar to UnknownStruct3
{
    s64 Unknown1 <format=hex, comment= "???; Set to 0, then 0x7FFFFFFFFFFFFFFF in player ctor">; //0x8DEC
    u8 Unknown2 <format=hex, comment= "???; Set to 0x21 in player ctor">; //0x8DF4
    u8 Unknown3 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8DF5
    u8 Unknown4 <format=hex, comment= "???; Set to 0x9 in player ctor">; //0x8DF6
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor">; //0x8DF7
    u32 Unknown6 <format=hex, comment= "???; Set to 0x00007ffe in player ctor">; //0x8DF8
    u32 Unknown7 <format=hex, comment= "???; Set to 0x00007ffe in player ctor">; //0x8DFC
    u8 Unknown8 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8E00
    u8 Unknown9 <format=hex, comment= "???; Set to 0x7 in player ctor">; //0x8E01
    u8 Unknown10 <format=hex, comment= "???; Set to 0xFF in player ctor">; //0x8E02
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor;">;
};


typedef struct UnknownStruct6Mini
{
    TownID TownData1;
    TownID TownData2;
    u16 VillagerID <format=hex, comment= "This struct used in Villager ctor, and this is VID in it; Set to 0xFFFF in player ctor">;
    u8 VillagerPersonality <format=hex, comment= "This struct used in Villager ctor, and this is VP in it; Set to 0x8 in player ctor">;
    u8 Padding <format=hex, comment= "Padding: Not set in ctor">;
};

typedef struct UnknownStruct6
{
    s64 Unknown1 <format=hex, comment= "???; Set to 0, then 0x7FFFFFFFFFFFFFFF in player ctor">;
    u8 Unknown2 <format=hex, comment= "???; Set to 0x21 in player ctor">;
    u8 Unknown3 <format=hex, comment= "???; Set to 0xFF in player ctor">;
    u8 Unknown4 <format=hex, comment= "???; Set to 0x9 in player ctor">;
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor">;
    UnknownStruct6Mini Mini1;
    UnknownStruct6Mini Mini2;
    u32 Unknown6 <format=hex, comment= "???; Set to 0x00007ffe in player ctor">;
    u32 Unknown7 <format=hex, comment= "???; Set to 0x00007ffe in player ctor">;
    u8 Unknown8 <format=hex, comment= "???; Set to 0 in player ctor">;
    u8 Unknown9 <format=hex, comment= "???; Set to 0 in player ctor">;
};

typedef struct UnknownStruct7 //Probably exact same struct as UnknownStruct4 but is set differently
{
    s64 Unknown1 <format=hex, comment= "???; Set to 0, then 0x7FFFFFFFFFFFFFFF in player ctor">;
    u8 Unknown2 <format=hex, comment= "???; Set to 0x21 in player ctor">;
    u8 Unknown3 <format=hex, comment= "???; Set to 0xFF in player ctor">;
    u8 Unknown4 <format=hex, comment= "???; Set to 0x9 in player ctor">;
    u8 Unknown5 <format=hex, comment= "???; Set to 0xFF in player ctor">;
    u8 Unknown6 <format=hex, comment= "???; Set to 0xFF in player ctor">;
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor">;
};

typedef struct UnknownStruct8 //Similar to UnknownStruct3
{
    s64 Unknown1 <format=hex, comment= "???; Set to 0, then 0x7FFFFFFFFFFFFFFF in player ctor">; //
    u8 Unknown2 <format=hex, comment= "???; Set to 0x21 in player ctor">; //
    u8 Unknown3 <format=hex, comment= "???; Set to 0xFF in player ctor">; //
    u8 Unknown4 <format=hex, comment= "???; Set to 0x9 in player ctor">; //
    u8 Unknown7 <format=hex, comment= "Padding: Not set in ctor">;
};

typedef struct UnknownStruct9
{
    u16 Unknown1 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u8 Unknown2 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u8 Unknown3 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown4 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown5 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown6 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown7 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown8 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u16 Unknown9 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown10 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown11 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u32 Unknown12 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u16 Unknown13 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u8 Unknown14 <format=hex, comment= "???; Set to 0 in player ctor">; //
    u8 Padding1 <format=hex, comment= "Padding: Not set in ctor">;
};

typedef struct UnknownStruct10
{
    Item UnkItem1 <format=hex, comment= "Some Item; Set to 0x00007ffe in player ctor">;
    u16 Unknown2 <format=hex, comment= "???; Set to 0 in player ctor">;
};

typedef struct LyleFlags
{

    u8 HasHeardEvaluation : 1 <comment="Set when asking about home evaluation">;
    u8 HasAskedWhatsNew : 1;
    u8 HasHeardFirstEvaluation: 1 <comment="Set when asking about home evaluation">;
    u8 LyleWhatsNew : 5 <format=hex, comment= HHAWhatsNewString>;
};

/* HEADER STRUCT */

typedef struct SecureValueHeader
{
    u64  SecureValue <format=hex,comment="Unused in ACNL WA">; //0x0
    u32  SaveInitalised <format=hex,comment="Has to be exactly 1">;
    u8   HeaderPadding[0x74] <format=hex,comment="Always 0">;
};

typedef struct ACNL_SaveHeader
{
    u32  HeaderChecksum <format=hex,comment="Checksum of the next 0x1C of header data">;  //0x80
    u16  SaveVerifier1 <format=hex,comment="Always 0x009E; 0x00F8 pre-WA">;
    u8   SaveVerifier2 <format=hex,comment="Has to be exactly 0x2; 0x2 pre-WA">;
    u8   HeaderPadding[0x19] <format=hex,comment="Always 0">;
};

/* PLAYER STRUCT */

typedef struct ACNL_Player //UnknownNotSetYetX = Not set by player ctor
{
    u32 Checksum1 <format=hex,comment="Checksum of the first 0x6b84 of player data">;  //0xA0
    u8 HairStyle <format=hex,comment=HairStyleString>;         //0xA4
    u8 HairColor <format=hex,comment="Values: 0x0 -> 0xF">;    //0xA5
    u8 Face <format=hex,comment="Values: 0x0 -> 0xB">;         //0xA6
    u8 EyeColor <format=hex,comment="Values: 0x0 -> 0x5">;     //0xA7
    u16 Tan <format=hex,comment="Values: 0x0 -> 0xF">;         //0xA8
    Item Hat  <format=hex,comment="Item ID < 0xXXXX">;          //0xAA
    Item Accessory <format=hex,comment="Item ID < 0xXXXX">;     //0xAE
    Item TopWear <format=hex,comment="Item ID < 0xXXXX">;       //0xB2
    Item UnderTopWear <format=hex,comment="Item ID < 0xXXXX">;  //0xB6
    Item BottomWear <format=hex,comment="Item ID < 0xXXXX">;    //0xBA
    Item Socks <format=hex,comment="Item ID < 0xXXXX">;         //0xBE
    Item Shoes <format=hex,comment="Item ID < 0xXXXX">;         //0xC2
    Item HeldItem <format=hex,comment="Item ID < 0xXXXX">;      //0xC6
    u8 Unknown0 <format=hex,comment="Inverted gender(?): 1 for male, 0 for female. Default = 1 in PlayerConstructor (EUR 1.5 0x20D27C)">; //0xCA
    u8 Padding_0 <format=hex,comment="U8 Zero Padding; Always 0x00">; //0xCB
    Player_Patterns Patterns <comment="10 Patterns">;  //0xCC
    u8 PatternOrder[10]  <format=hex,comment="Order of patterns from 0x0 - 0x9">;  //0x552C -> 0x5535
    u16 Padding_1 <format=hex,comment="U16 Zero Padding; Always 0x0000">;  //0x5536
    MiiData PlayerMii;
    u8 HasMii <format=hex,comment="Values: 0 = No Mii, 1 = Has Mii, <1 = Has Mii, face doesn't show">; //0x55E0
    u8 Padding_2 <format=hex,comment="Not Verified: U8 Zero Padding; Always 0x00">;    //0x55E1
    u16 Padding_3 <format=hex,comment="Not Verified: U16 Zero Padding; Always 0x0000">;   //0x55E2 -> 0x55E3
    Mannequin Mannequin1;
    Mannequin Mannequin2;
    Mannequin Mannequin3;
    Mannequin Mannequin4;
    u16 Padding_4;                                       //0x5644
    PersonalID PlayerInfo;                                  //0x5646 -> 0x5671
    u8 BirthMonth;                                       //0x5674
    u8 BirthDay;                                         //0x5675
    u16 YearRegistered;                                  //0x5676
    u8 MonthRegistered;                                  //0x5678
    u8 DayRegistered;                                    //0x5679
    u16 Padding_5;                                       //0x567A: Zero Padding; Always 0x0000  
    PlayerBadges Badges;                                    //0x567C -> 0x5763
    HHAHouseInfo HHAHouse;                                  //0x5764 -> 0x5789
    ACNL_DreamAddress DreamCode <comment=DreamCodeString>;  //0x5790 -> 0x579B
    u32 Padding_6;                                            //0x579C -> 0x579F
    Player_Flags PlayerFlags;                               //0x57A0 -> 0x57D3
    u32 HasTPCPic;                                       //0x57D4 -> 0x57D7
    u8 TPCPic[0x1400];                                   //0x57D8 -> 0x6BD7
    wchar_t TPCText[33];                                    //0x6BD8 -> 0x6C19
    u8 Unknown1 <comment="Unknown: Was 1 on a save, 2 on another" >; //0x6C1A
    u8 Unknown2;                                         //0x6C1B
    u32 Unknown3;                                        //0x6C1C -> 0x6C19
    u32 Unknown4;                                        //0x6C20 -> 0x6C23
    u32 Padding_7;                                        //0x6C24 -> 0x6C27
    u32 Checksum2;                                       //0x6C28 -> 0x6C2B
    u64 BankAmount <format=hex,comment=DecryptACNLValue >; //0x6C2C -> 0x6C33: Encrypted Value
    u64 DebtAmount <format=hex,comment=DecryptACNLValue >; //0x6C34 -> 0x6C3B: Encrypted Value
    u64 MedalAmount <format=hex,comment=DecryptACNLValue >; //0x6C3C -> 0x6C43: Encrypted Value
    u64 BellsFromReeseAmount <format=hex,comment=DecryptACNLValue >; //0x6C44 -> 0x6C4B: Encrypted Value
    u32 Padding_8;                                       //0x6C4C -> 0x6C4F
    s64 Playtime <comment=ParsePlaytime>;                 //0x6C50 -> 0x6C57
    TownID TownData2;                                       //0x6C68 -> 0x6C5D
    u16 Padding_10;                                      //0x6C6E -> 0x6C6F
    Item Inventory[16] <format=hex>;                      //0x6C70 -> 0x6CAF
    u8 InventoryItemLocks[16] <format=hex>;              //0x6CB0 -> 0x6CBF
    u8 UnlockedItems[0x2E8] <format=binary, comment="Game uses one big bitfield for items 'unlocked'. Bits correspond to item ids. Used for catalog, encyclopedia, etc" >; //0x6CC0 -> 0x6FA7
    u64 PocketMoney <format=hex,comment=DecryptACNLValue >; //0x6FA8 -> 0x6FAF: Encrypted Value
    Item IslandBox[40] <format=hex>;                      //0x6FB0 -> 0x704F
    Item IslandInventory[16] <format=hex>;                //0x7050 -> 0x708F
    u8 IslandInventoryItemLocks[16];                     //0x7090 -> 0x709F: may be Padding also, needs testing
    Item UnknownItem1 <format=hex>;                       //0x70A0 -> 0x70A3
    Item UnknownItem2 <format=hex>;                       //0x70A4 -> 0x70A7
    Player_Letters Letters;                                 //0x70A8 -> 0x89A7
    wchar_t LetterHeader[0x20];                             //0x89A8 -> 0x89E7
    u16 Padding_11;                                      //0x89E8 -> 0x89E9
    wchar_t FutureLetterHeader[0x20];                       //0x89EA -> 0x8A29
    u16 Padding_12;                                      //0x8A2A -> 0x8A2B    
    wchar_t LetterSignature[0x20];                          //0x8A2C -> 0x8A6B
    u16 Padding_13;                                      //0x8A6C -> 0x8A6D
    u8 DefaultLtrRecieverNameIndent <format=hex >;       //0x8A6E -> 0x8A6E
    u8 DefaultFutureLtrRecieverNameIndent <format=hex,comment= "Cannot be >= 0x20" >; //0x8A6F -> 0x8A6F
    Player_Emotes Emotes <comment= "Players Emotes (40 slots)">; //0x8A70 -> 0x8A97
    s8 EmotePage <comment= "0xFF = Page 1, 0x00 = Page 2">;   //0x8A98 -> 0x8A98
    u8 Padding_14;                                            //0x8A99 -> 0x8A99
    u16 SpotpassDLCRecievedIds[32] <comment= "Not Verified; 0xFFFF is default, then 0xXXXX is ID of DLC recieved">; //0x8A9A -> 0x8AD9
    u16 Padding_15;                                           //0x8ADA -> 0x8ADB
    UnknownStruct1 UnkBuffer1;                                   //0x8ADC -> 0x8B5B
    u16 Padding_16;                                           //0x8B5C -> 0x8B5D
    LyleFlags LyleFlag;                                          //0x8B5E
    u8  HasDeductions__ <comment= "Not 100% sure; something to do with items facing a wall, therefore deductions; Reads HouseUnk9 later in code">; //0x8B5F
    u8  HHAAwardsUnlockedDupe;                                //0x8B60
    u8  GoldExteriorsUnlockedDupe;                            //0x8B60
    u8  HHAUnk1;                                              //0x8B62
    u8  HHAUnk2 <comment= "READU8(CurrentHouseTheme+1) | 0x80; Only When Exterior/Theme???">; //0x8B63
    u8  HHAUnk3[0x1C] <comment= "Come back to later">; //0x8B63 -> //0x8B7F
    UnknownStruct2 UnkBuffer2;                                   //0x8B80 -> 0x8DBB
    u64 MeowCoupons <format=hex,comment=DecryptACNLValue >;   //0x8DBC -> 0x8DC3: Encrypted Value
    u64 Unk2 <format=hex,comment=DecryptACNLValue >;          //0x8DC4 -> 0x8DCB: Encrypted Value
    u64 Unk3 <format=hex,comment=DecryptACNLValue >;          //0x8DCC -> 0x8DD3: Encrypted Value
    u64 Unk4 <format=hex,comment=DecryptACNLValue >;          //0x8DD4 -> 0x8DDB: Encrypted Value
    u64 Unk5 <format=hex,comment=DecryptACNLValue >;          //0x8DDC -> 0x8DE3: Encrypted Value
    u64 Unk6 <format=hex,comment=DecryptACNLValue >;          //0x8DE4 -> 0x8DEB: Encrypted Value
    UnknownStruct3 UnkBuffer3;                                   //
    UnknownStruct4 UnkBuffer4;                                   //
    UnknownStruct5 UnkBuffer5;                                   //
    UnknownStruct6 UnkBuffer6;                                   //
    UnknownStruct7 UnkBuffer7;                                   //
    UnknownStruct8 UnkBuffer8;                                   //
    u8 UnknownNotSetYet[0xAA];
    u8 PlayerFFFF_Filler[0x16] <format=hex,comment="Always contains 0x16 0xFF bytes. ctor sets this." >;
    u8 UnknownNotSetYet2[0xC];
    UnknownStruct9 UnkBuffer9;
    Item UnkItem1 <format=hex>;
    Item UnkItem2 <format=hex>;
    u8 UnknownNotSetYet3[0xE];
    u8 UnknownNotSetYet4[0xA];
    u16 Unk_u16_1 <format=hex, comment= "Set to 0x7DB in player ctor">;
    u16 Unk_u16_2 <format=hex, comment= "Set to 0x7DB in player ctor">;
    u16 Unk_u16_3 <format=hex, comment= "Set to 0 in player ctor">;
    u8 Unk_u8_1 <format=hex, comment= "Set to 0 in player ctor">;
    u8 Unk_u8_2 <format=hex, comment= "Set to 0 in player ctor">;
    u8 UnknownNotSetYet5[0x45];
    u8 UnkBuffer10[0x21] <format=binary, comment= "ctor unsets every bit except in last byte in buffer, it only unsets bits 0 to 5">;
    u8 Padding_17;
    u8 Unk_u8_3 <format=hex, comment= "Set to 0 in player ctor">;
    u8 UnknownNotSetYet6[0xE];
    Item SantaBagInv[10];                             //0x9048 -> 0x906F
    u8 PlayerZero_Filler[0x320] <format=hex, comment="Always 0?? Game just memclr's in player ctor.">;
    Player_Dressers Dressers <format=hex, comment="Each dresser is 60 long">;
    wchar_t BDayWish[0x22];
    ACNL_Letter Letter1;
	ACNL_Letter Letter2;
	ACNL_Letter Letter3;
	ACNL_Letter Letter4;
	ACNL_Letter Letter5;
    u8 UnknownNotSetYet7[0xC0];
    u8 UnkBuffer11[0x40];
    u8 UnkBuffer12[0x40];
    u8 UnknownNotSetYet8[0xA4];
    UnknownStruct10 UnkStruct10_1;
    UnknownStruct10 UnkStruct10_2;
    UnknownStruct10 UnkStruct10_3;
    Item UnkItem1 <format=hex, comment= "Some Item; Set to 0x00007ffe in player ctor">;
    u16 Padding_18;

};

typedef struct ACNL_Date
{
    u16 Year;
    u8 Month;
    u8 Day;
};

typedef struct VillagerFutureHome
{
    PersonalID unknownPID;
    u8 Zerod[34] <comment="Related to class script::WordPtrSv, technically same buffer as UnkName">;
    wchar_t UnkName[9] <comment="Related to class script::WordPtrSv, technically same buffer as Zerod">;
    Item UnkItem1 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem2 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem3 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem4 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem5 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem6 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem7 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem8 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem9 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem10 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem11 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem12 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem13 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem14 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem15 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem16 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem17 <format=hex, comment= "Group 3; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem18 <format=hex, comment= "Group 4; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem19 <format=hex, comment= "Group 5; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem20 <format=hex, comment= "Group 6; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem21 <format=hex, comment= "Group 7; Some Item; Set to 0x00007ffe in player ctor">;
    u8 UnkBitfield[8] <format=binary>;
    u16 unk;
    TownID UnkTownID;
    u64 Unknown22 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    ACNL_Date Date1;
    ACNL_Date Date2;
    ACNL_Date Date3;
    ACNL_Date Date3;
    u16 Unknown23 <comment="ctor sets to 0xFFFF">;
    u8 Unk24 <comment="ctor sets to 0x31">;
    u8 Padding;
};

typedef struct ACNL_Villager
{
    UnknownStruct6Mini Mini1;
    ACNL_Pattern Pattern;
    TownID  TownID1;
    u32 Unknown1[2] <comment="Game copies value from 0x6E29A, otherwise gens random number, gets u32 value then does something to it (EUR 1.5 IDA: 0x6BBBD4)">;
    u64 Unknown2 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    Item UnkItem1 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem2 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem3 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem4 <format=hex, comment= "Group 1; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem5 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem6 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem7 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem8 <format=hex, comment= "Group 2; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem9 <format=hex, comment= "Group 3; Some Item; Set to 0x00007ffe in player ctor">;
    Item UnkItem10 <format=hex, comment= "Group 4; Some Item; Set to 0x00007ffe in player ctor">;
    //This is the places the Villager has passed through, which is cool
    VillagerFutureHome Home1; //This is the current home, or if the villager is moving somewhere, the next home.
    VillagerFutureHome Home2; //This is the last home, or if the villager is moving somewhere, the current home.
    VillagerFutureHome Home3;
    VillagerFutureHome Home4;
    VillagerFutureHome Home5;
    VillagerFutureHome Home6;
    VillagerFutureHome Home7;
    VillagerFutureHome Home8;
    VillagerFutureHome Home9;
    VillagerFutureHome Home10;
    VillagerFutureHome Home11;
    VillagerFutureHome Home12;
    VillagerFutureHome Home13;
    VillagerFutureHome Home14;
    VillagerFutureHome Home15;
    VillagerFutureHome Home16;
    u16 Padding;
    ACNL_Letter Letter1 <comment="Group 1">;
    ACNL_Letter Letter2 <comment="Group 1">;
    ACNL_Letter Letter3 <comment="Group 1">;
    ACNL_Letter Letter4 <comment="Group 1">;
    ACNL_Letter Letter5 <comment="Single">;
    u16 UnkNum1 <comment="Single; Set to 2011 in ctor">;
    u16 UnkNum2 <comment="Group 1; Set to 2011 in ctor">;
    u16 UnkNum3 <comment="Group 1; Set to 2011 in ctor">;
    u16 UnkNum4 <comment="Group 1; Set to 2011 in ctor">;
    u16 UnkNum5 <comment="Group 1; Set to 2011 in ctor">;
    Item Shirt; // 246E - 2471
    Item Song; // 2472 - 2475
    Item Wallpaper; // 2476 - 2479
    Item Carpet; // 247A - 247D
    Item Umbrella; // 247E - 2481
    Item Furniture[16]; // 2482 - 24C1
    ACNL_Date Date1; // 24C2 - 24C5
    wchar_t Catchphrase[11]; // Last character is null terminator | 24C6 - 24DB
    u8 Unknown3 <comment="ctor sets to 7">;
    u8 Padding2;
    ACNL_Date Date2 <comment="This seems to be a date, maybe date last talked??">;
    u8 Unknown4 <comment="ctor sets to 2">; // Also general flags? | 24E4
    u8 Unknown5 <comment="ctor sets to 0x18; 0x2 means they're at home">;
    Villager_Status Status <comment="ctor sets to 0; bit 1 set: moving out, bit 2 set: moving in; bit 3 removed from all villagers when loading game, unk">;
    u8 Unknown6 <comment="ctor sets to 0xFF">;
    u8 Unknown7 <comment="ctor sets to 0xFF">;
    u8 Unknown8 <comment="ctor sets to 0xFF">;
    u8 Unknown9 <comment="ctor sets to 0">;
};

typedef struct ACNL_VillagerData
{
    u32 Checksum <format=hex,comment="Checksum of the 0x22BC8 of this data">;
    ACNL_Villager Villager1;
    ACNL_Villager Villager2;
    ACNL_Villager Villager3;
    ACNL_Villager Villager4;
    ACNL_Villager Villager5;
    ACNL_Villager Villager6;
    ACNL_Villager Villager7;
    ACNL_Villager Villager8;
    ACNL_Villager Villager9;
    ACNL_Villager Villager10;
    u32 Unk1;
    u8 Unknown[0x2474];
    ACNL_Villager UnkVillager1;
    ACNL_Villager UnkVillager2;
    ACNL_Villager UnkVillager3;
    ACNL_Villager UnkVillager4;
    u8 Unknown2[0x14];
};


typedef struct ACNL_BuildingData
{
    u32 Checksum <format=hex,comment="Checksum of the 0x44B8 of this data">;
    u8  NormalPWPsAmount;
    u8  EventPWPsAmount;
    u8  TownTreeSize <comment="1 <-> 7">;
    u8  Padding1;
    Town_Buildings Buildings;

    //These are for the design stands I think; "FF_Padding1" is probably not padding but which pattern corresponds to which pwp???
    ACNL_Pattern   UnkPattern1;
    u64 FF_Padding1;
    ACNL_Pattern   UnkPattern2;
    u64 FF_Padding2;
    ACNL_Pattern   UnkPattern3;
    u64 FF_Padding3;
    ACNL_Pattern   UnkPattern4;
    u64 FF_Padding4;
    ACNL_Pattern   UnkPattern5;
    u64 FF_Padding5;
    ACNL_Pattern   UnkPattern6;
    u64 FF_Padding6;
    ACNL_Pattern   UnkPattern7;
    u64 FF_Padding7;
    ACNL_Pattern   UnkPattern8;
    u8 UnlockedPWPs[20] <format=binary, comment="Devs use bitfield for unlocked PWPS">;
};

typedef struct ACNL_MinigameData
{
    u32 Checksum <format=hex,comment="Checksum of the 0x28F0 of this data">;
    u8 Unknown[0x28F0];
};


typedef struct ACNL_UnknownData
{
    u32 Checksum <format=hex,comment="Checksum of the 0x7F0 of this data">;
    u8 Unknown[0x7F0];
};

typedef struct ACNL_MiniTownPlayerStruct //size=0x20
{
    u16 Unknown[0x10] <comment="ctor sets each to 0xFFFF">;
};

typedef struct ACNL_SmallTownPlayerStruct //size = 0x302
{
    u8 Unknown1[0x22];
    ACNL_MiniTownPlayerStruct Unk1; //ctor inits these seperately then all at once, idk if it's two arrays or one
    ACNL_MiniTownPlayerStruct Unk2;
    Item UnkItems1[0x64];
    Item UnkItems2[0x40];
    Item UnkItem1;
    Item UnkItem2;
    Item UnkItem3;
    Item UnkItem4;
};

typedef struct ACNL_SomeTownPlayerStruct
{
    u32 ZeroPad1;
    u32 Unknown1;
    u32 Unknown2;
    u8  Unknown3;
    u32 Unknown4;
    u32 Unknown5;
    u8  Unknown6;
    u16 Padding1;
    ACNL_SmallTownPlayerStruct Unk1;
    ACNL_SmallTownPlayerStruct Unk2;
    ACNL_SmallTownPlayerStruct Unk3;
    ACNL_SmallTownPlayerStruct Unk4;
    ACNL_SmallTownPlayerStruct Unk5;
    ACNL_SmallTownPlayerStruct Unk6;
    u16 Unk7;
    u8 Unk8;
    u8 Padding2;
};

typedef struct ACNL_MuseumExhibit //size = 0xB98
{
    u8 Unk1 <comment="Flag of some sort, ctor sets to 0xFF">;
    u8 Padding;
    ACNL_SmallTownPlayerStruct unkSmallTownPlayerStruct1;
    ACNL_Pattern UnkPattern1;
    wchar_t OwnerName[0x11];
    u16 Padding2;
};

typedef struct ACNL_NewPWP //size = 0x10
{
    u8 Unk1 <comment="ctor sets to 0">;
    u8 Unk2 <comment="ctor sets to 0">;
    u8 Unk3 <comment="ctor sets to 0">;
    u8 Padding;
    u32 Unk4 <comment="Money accumulated???">;
    u32 Unk5 <comment="Total cost amount???">;
    ACNL_Building Building;
};

typedef struct ACNL_BulletinBoardMessage //size = 0x1AC
{
    u32 Unk1 <comment="ctor sets to 0">;
    u32 Unk2 <comment="ctor sets to 0">;
    u32 Unk3 <comment="ctor sets to 0">;
    u32 Unk4 <comment="ctor sets to 0">;
    u16 Unk5 <comment="ctor sets to 0">;

    u32 Unk6 <comment="ctor sets to 0">;
    u32 Unk7 <comment="ctor sets to 0">;
    u32 Unk8 <comment="ctor sets to 0">;
    u32 Unk9 <comment="ctor sets to 0">;
    u16 Unk10 <comment="ctor sets to 0">;

    wchar_t Message[0xC1];
    ACNL_Date MessageDate;
    u16 Unk11 <comment="ctor sets to 0">;
};

typedef struct ACNL_TownData
{
    u32 Checksum <format=hex,comment="Checksum of the 0x1E4D8 of this data">;
    u8 Unknown1[88];
    u8 OceanSide <comment="[0-1]; 0: Left, 1: Right; Museum and Camping Ground and the starting position of the train driving by are all on the opposite side to this.; Ctor sets to 3">;
    u8 GrassType <comment="[0-2]; 0: Triangle / Square (Winter) | 1: Circle / Star (Winter) | 2: Square / Circle (Winter); Ctor sets to 2">;
    u8 CliffType <comment="[0-2]; This is unused/scrapped. All 3 cliff texture in the ROM are the exact same.; Ctor sets to 2">;
    u8 Padding1;
    u16 TownAcres[7*6] <comment="42 acres in total; 7 colunms, 6 rows. Game reads Acre IDs as u16; ctor sets each to 265 (0x109)">;
    Item TownItems[(16*16)*(5*4)] <comment="16*16 items per acre; Items only cover map acres (5*4); 0x1400 of items">;
    u8 MapGrassToday[(16*16)*(5*4)]  <comment="16*16 slots per acre; Grass deterioration only affects map acres (5*4); 0x1400 of grass">;
    u8 Unused2[40] <comment="Town data ctor never initializes this, so likely not used. Where the code would branch to do so, there is a NOP (both in WA and Orig).">;
    u8 MapGrass[(16*16)*(8*6)];
    u8 Unused3[0x1000] <comment="Town data actually includes it with MapGrass (0x8000 in total), despite this portion not being used">;
    ACNL_SomeTownPlayerStruct Player1;
    ACNL_SomeTownPlayerStruct Player2;
    ACNL_SomeTownPlayerStruct Player3;
    ACNL_SomeTownPlayerStruct Player4;
    u8 Unknown2[0x10];
    s64 Playtime <comment=ParsePlaytime>;
    TownID TownData1;
    u8 Unknown3;
    Town_Flags TownFlags;
    u16 Unknown4; //Likely padding
    Item LostAndFoundItems[16];
    u8 Unknown5[16]; //likely padding
    u64 Unknown6 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    Item TownFruit <comment="Yes, the game uses an item id to represent the town fruit lol">;
    u16 DaysPlayed;
    u8 Unknown7[0xC];
    u8 Unknown8 <comment="Group 1">;
    u8 Unknown9 <comment="Group 1">;
    u8 Unknown10 <comment="Group 1">;
    u8 Padding2;
    u64 Unknown11 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u64 Unknown12 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u8 Unknown13[8];
    u64 Unknown14 <format=hex,comment=DecryptACNLValue>;
    Item NooklingsItems[24];
    u8 Unknown15[28]; //likely padding
    Item AblesItems[5];
    Item AblesPatternItems[8];
    u64 Unknown16 <format=hex,comment=DecryptACNLValue>;
    u8 Unknown17[0x10]; //likely padding
	ACNL_Pattern AbleDisplayPattern1;
	ACNL_Pattern AbleDisplayPattern2;
	ACNL_Pattern AbleDisplayPattern3;
	ACNL_Pattern AbleDisplayPattern4;
	ACNL_Pattern AbleDisplayPattern5;
	ACNL_Pattern AbleDisplayPattern6;
	ACNL_Pattern AbleDisplayPattern7;
	ACNL_Pattern AbleDisplayPattern8;
    Item LabellesItems[7] <comment="Accessories in right of shop">;
    u8 Unknown18[8]; //likely padding
    u64 Unknown19 <format=hex,comment=DecryptACNLValue>;
    wchar_t ScrappedString[4];
    u64 Unknown20 <format=hex,comment=DecryptACNLValue>;
    u16 Unknown21;
    Item LeifItems[11];
    u8 Unknown22[14]; //likely padding
    Item ReddItems[4];
    u8 Unknown23[4]; //likely padding
    PersonalID UnknownPID1; //unused?
    PersonalID UnknownPID2; //unused?
    PersonalID UnknownPID3; //unused?
    PersonalID UnknownPID4; //unused?
    u64 Unknown24 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown25 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown26 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown27 <format=hex,comment=DecryptACNLValue>;
    u8 Unknown28[8];
    u64 Unknown29 <format=hex,comment=DecryptACNLValue>;
    u8 KickUnlockStatus <comment="0 = locked; 1 = Being Built; 2 = Built/Unlocked">;
    u8 Padding4;
    Item KicksItems[6];
    u8 Unknown31[6];
    Item UnkItems1[4]; //ctor does this and below seperately, 4 at a time
    Item UnkItems2[4];
    u32 Padding5;
    u64 Unknown32 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u64 Unknown33 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u64 Unknown34 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u64 Unknown35 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u8 Unknown36[0x10]; //likely padding
    Item UnkItems3[5];
    Item UnkItems4[8];
    u8 Unknown37[8];
    u64 Unknown38 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown39 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown40 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown41 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown42 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown43 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown44 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown45 <format=hex,comment=DecryptACNLValue>;
	ACNL_Pattern UnknownPattern1;
	ACNL_Pattern UnknownPattern2;
	ACNL_Pattern UnknownPattern3;
	ACNL_Pattern UnknownPattern4;
	ACNL_Pattern UnknownPattern5;
	ACNL_Pattern UnknownPattern6;
	ACNL_Pattern UnknownPattern7;
	ACNL_Pattern UnknownPattern8;
    u64 Unknown46 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown47 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown48 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown49 <format=hex,comment=DecryptACNLValue>;
    u16 Unknown50;
    Item MuseumItems[3];
    u8 Unknown51[4]; //likely padding
    Item NooksHomeItems[8];
    u8 Unknown52[8]; //likely padding
    u8 GracieUnlockStatus <comment="0 = locked??; 1 = Unlocked??">;
    u8 Padding6;
    Item GracieItems[18];
    u8 Unknown53[18]; //likely padding
    Mannequin UnkMannequin1;
    Mannequin UnkMannequin2;
    u8 Unknown54[0x10];
    Item UnkItem1;
    Item UnkItem2;
    Item UnkItem3;
    Item UnkItem4;
    u8 Unknown55[0x16];
    Item UnkItems5[4];
    u64 Unknown56 <format=hex,comment=DecryptACNLValue>;
    u64 Unknown57[0xE] <format=hex,comment=DecryptACNLValue>;
    u8 Unknown58[8];
    Item UnkItem6;
    Item UnkItems7[2];
    Item UnkItems8[2];
    u8 Unknown59[0x10];
    //This is likely town tree stuff
    u16 Unknown60 <comment="year?">;
    u8 Unknown61;
    u8 Unknown62;
    u16 Unknown63 <comment="year?">;
    u8 Unknown64;
    u8 Unknown65;
    u8 Unknown66[0x44];
    ACNL_Date TownTreeDates1[0x43];
    ACNL_Date TownTreeDates2[0x48];
    ACNL_Date TownTreeDates3[0x1E];
    ACNL_Date TownTreeDates4[0x48];
    ACNL_Date TownTreeDates5[0x19];
    ACNL_Date TownTreeDates6[0x08];
    u8 Unknown67[0x114];
    ACNL_MuseumExhibit Exhibit1;
    ACNL_MuseumExhibit Exhibit2;
    ACNL_MuseumExhibit Exhibit3;
    ACNL_MuseumExhibit Exhibit4;
    u64 Unknown68 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u8 Unknown69[7];
    u64 Unknown70 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u8 Unknown71[7];
    u64 Unknown72 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u8 Unknown73[10];
    ACNL_NewPWP NextPWPToBuild;
    ACNL_Building UnknownBuilding1;
    ACNL_BulletinBoardMessage BBoardMessages[0xF];
    u64 Unknown74 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u8 Unknown75[0x14];
    u16 Unknown76;
    Item UnkItem9;
    u64 Unknown77 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u64 Unknown78 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    u64 Unknown79 <format=hex, comment="ctor sets 0x7FFFFFFFFFFFFFFF (max positive U64)">;
    PersonalID unknownPID1;
    PersonalID unknownPID2;
    PersonalID unknownPID3;
    u8 Unknown80[0x96];
    Item UnkItems10[3];
    u8 unknown[0x1BCE];
};

//main
SecureValueHeader SecureValue;
ACNL_SaveHeader Header;
ACNL_Player Player1;
ACNL_Player Player2;
ACNL_Player Player3;
ACNL_Player Player4;
ACNL_VillagerData VillagerData;
ACNL_BuildingData BuildingData;
ACNL_MinigameData MinigameData; //WA exclusive
ACNL_UnknownData UnkData; //WA exclusive
ACNL_TownData TownData;
u8 lol;